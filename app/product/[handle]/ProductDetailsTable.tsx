"use client"

import { useState } from 'react';
import { Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import jsPDF from 'jspdf';

interface ProductDetailsTableProps {
  details: Record<string, string>;
  productTitle: string;
  title?: string;
}

export default function ProductDetailsTable({ 
  details, 
  productTitle, 
  title = "Product Details" 
}: ProductDetailsTableProps) {
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  const handleDownloadSpecSheet = async () => {
    setIsGeneratingPDF(true);
    
    try {
      const pdf = new jsPDF();
      
      // Header
      pdf.setFontSize(20);
      pdf.text(productTitle, 20, 30);
      pdf.setFontSize(16);
      pdf.text('Product Specifications', 20, 45);
      
      // Add line
      pdf.line(20, 50, 190, 50);
      
      let yPosition = 65;
      const lineHeight = 8;
      const pageHeight = pdf.internal.pageSize.height;
      
      // Add details
      pdf.setFontSize(10);
      Object.entries(details).forEach(([key, value]) => {
        // Check if we need a new page
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = 30;
        }
        
        // Key (bold)
        pdf.setFont(undefined, 'bold');
        pdf.text(key + ':', 20, yPosition);
        
        // Value (normal)
        pdf.setFont(undefined, 'normal');
        const keyWidth = pdf.getTextWidth(key + ': ');
        pdf.text(value, 20 + keyWidth, yPosition);
        
        yPosition += lineHeight;
      });
      
      // Footer
      pdf.setFontSize(8);
      pdf.text('Generated by Nature\'s Seed', 20, pageHeight - 20);
      pdf.text(new Date().toLocaleDateString(), 190 - pdf.getTextWidth(new Date().toLocaleDateString()), pageHeight - 20);
      
      // Save the PDF
      pdf.save(`${productTitle.replace(/[^a-zA-Z0-9]/g, '_')}_specifications.pdf`);
    } catch (error) {
      console.error('Failed to generate PDF:', error);
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  return (
    <section id="details" className="py-12 bg-gray-50">
      <div className="max-w-6xl mx-auto px-4">
        <div className="flex items-center justify-between mb-8">
          <h2 className="text-3xl font-bold text-gray-900">{title}</h2>
          <Button
            variant="outline"
            onClick={handleDownloadSpecSheet}
            disabled={isGeneratingPDF}
            className="flex items-center gap-2"
          >
            <Download className="h-4 w-4" />
            {isGeneratingPDF ? 'Generating...' : 'Download Spec Sheet'}
          </Button>
        </div>
        
        <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-gray-900 w-1/3">
                    Specification
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-gray-900">
                    Details
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {Object.entries(details).map(([key, value], index) => (
                  <tr key={key} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td className="px-6 py-4 text-sm font-medium text-gray-900 align-top">
                      {key}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-600">
                      {value}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        
        <div className="mt-6 text-sm text-gray-600">
          <p>
            For additional technical specifications or custom blending options, please contact our seed specialists.
          </p>
        </div>
      </div>
    </section>
  );
}
